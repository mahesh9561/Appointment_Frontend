{"ast":null,"code":"// import React, { useContext, useState } from 'react';\n// import Calender from './Appointment/Calender';\n// import TimeSlots from './Appointment/TimeSlots';\n// import closeIcon from '../assets/close.png';\n// import { AppointmentContext } from './Appointment/Context/AppointmentContext';\n// import axios from 'axios';\n\n// const Slider = ({ closeSlider }) => {\n//   const [selectDate, setSelectDate] = useState(null);\n//   const [bookedSlots, setBookedSlots] = useState({});\n//   const [sessionBook, setSessionBook] = useState(null);\n//   const [activeTab, setActiveTab] = useState('session');\n//   const [yourSession, setYourSession] = useState([])\n//   const dateKey = selectDate ? selectDate.format('YYYY-MM-DD') : null;\n//   const slotsBookedForDate = bookedSlots[dateKey]\n//   const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n\n//   const {\n//     selectedSessionName, date, setDate, time, setTime, setLast_session, id\n//   } = useContext(AppointmentContext);\n\n//   // Handles the selected date change in the calendar\n//   const handleChange = (date) => {\n//     setSelectDate(date);\n//     setDate(date.format('YYYY-MM-DD'));\n//     setLast_session(date.format('YYYY-MM-DD'));\n//   };\n\n//   // Handles booking a time slot and updates booked slots state\n//   const handleBookSlot = (timeSlot) => {\n//     if (selectDate) {\n//       const dateKey = selectDate.format('YYYY-MM-DD');\n//       const currentBookings = bookedSlots[dateKey] || [];\n//       if (currentBookings.length < 2) { // Limit to two slots per date\n//         setTime(timeSlot)\n//         setBookedSlots((prev) => ({\n//           ...prev,\n//           [dateKey]: [timeSlot],\n//         }));\n//       }\n//     }\n//   };\n\n//   // Handles booking confirmation for a session and posts data to the backend\n//   const handleBook = async () => {\n//     setSessionBook({ date: selectDate.format('DD/MM/YYYY'), slots: slotsBookedForDate });\n\n//   };\n\n//   // Handler to open the calendar for selecting date and time slots\n//   const handleBookSessionClick = () => {\n//     setActiveTab('book');\n//     setIsCalendarOpen(true);\n//   };\n//   const handleYourSessionClick = async (id) => {\n//     console.log(\"Mahesh\")\n//     setActiveTab(\"session\")\n//     setIsCalendarOpen(false)\n//     try {\n//       const response = await axios.get(`http://localhost:8000/api/appointment/getSessionDetails/${id}`, {\n//         withCredentials: true\n//       });\n//       console.log(response.data);\n//       setYourSession(response.data); // Store the fetched data\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   }\n\n//   return (\n//     <div className=\"fixed top-0 right-0 h-full w-1/2 bg-gray-100 shadow-lg transform translate-x-0 transition-transform overflow-y-auto\">\n//       {/* Header with Close Button */}\n//       <div>\n//         <div className=\"px-3 pt-3 rounded-lg flex justify-start text-slate-400\">\n//           <button className=\"font-bold\" onClick={closeSlider}>\n//             <img src={closeIcon} className='w-5' alt=\"Close\" />\n//           </button>\n//           <p className=\"px-2 font-semibold text-sm\">Mock Session</p>\n//         </div>\n//         <p className=\"border-b pb-3 text-slate-700 m-2 px-8 text-xl\">{selectedSessionName}</p>\n//       </div>\n\n//       {/* Section to book or view session */}\n//       <div className=\"uppercase flex justify-around py-2 border-b-2 text-sm font-medium\">\n//         <p onClick={handleBookSessionClick}\n//           className={`cursor-pointer ${activeTab === 'book' ? 'text-blue-500 border-b-2' : ''}`}>\n//           Book Session\n//         </p>\n//         <p onClick={() => handleYourSessionClick(id)}\n//           className={`cursor-pointer ${activeTab === 'session' ? 'text-blue-500 border-b-2' : ''}`}>\n//           Your Session\n//         </p>\n\n//         {/* <Your_Session activeTab={activeTab} setIsCalendarOpen={setIsCalendarOpen} setActiveTab={setActiveTab} /> */}\n//       </div>\n\n//       {/* Calendar and time slot selection */}\n//       <div className=\"px-6 mt-3\">\n//         {!isCalendarOpen ? (\n//           <p className='flex justify-center items-center text-center h-screen text-slate-400'>\n\n//             <div className='w-full m-0'>\n//               {/* Updated to avoid invalid nesting */}\n//               <div className='bg-slate-200 rounded-lg border w-full flex justify-center items-center text-center p-4'>\n//                 <span className='text-xl px-2'>Session:</span> {/* Changed <p> to <span> */}\n//                 <select className='px-4 py-2 rounded-md w-1/2'>\n//                   <option value=\"\">Select Session</option>\n//                 </select>\n//               </div>\n\n//               {/* Display sessions fetched from the API */}\n//               <div>\n//                 {yourSession && yourSession.length > 0 ? (\n//                   <ul>\n//                     {yourSession.map((item) => (\n//                       <li key={item._id}>\n//                         <p>{item.date}</p>\n//                       </li>\n//                     ))}\n//                   </ul>\n//                 ) : (\n//                   <p>No sessions available</p>\n//                 )}\n//               </div>\n//             </div>\n//           </p>\n//         ) : (\n//           <div className=\"flex justify-between\">\n//             <Calender selectDate={selectDate} handleChange={handleChange} />\n//             {selectDate && (\n//               <div>\n//                 <div className='mb-3 bg-slate-200 rounded-lg w-1/2 mx-auto flex items-center justify-center text-center py-2'>\n//                   <h3>Select time-slot</h3>\n//                 </div>\n//                 <TimeSlots\n//                   slotsBookedForDate={slotsBookedForDate}\n//                   onBookSlot={handleBookSlot}\n//                   handleBook={handleBook}\n//                 />\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n\n//       {activeTab === 'book' ? (\n//         <div className=\"flex justify-around mb-4\">\n//           <div>\n//             {sessionBook ? (\n//               <div>\n//                 <h2 className='text-[12px] text-slate-500 font-medium'>Session Booked for</h2>\n//                 <h2>{date}, {time}</h2>\n//               </div>\n//             ) : (\n//               <h2>Available Slots for Booking</h2>\n//             )}\n//           </div>\n\n//           {/* Book session button */}\n//           <div className='flex justify-between'>\n//             <div>\n//               <button\n//                 className='text-white p-2 border bg-blue-400 rounded-xl'\n//                 onClick={handleBook}\n//               >\n//                 Book Session\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       ) : (\n//         <p className=' text-center'>PLEASE BOOK SESSION</p>\n//       )}\n\n//     </div>\n//   );\n// };\n\n// export default Slider;","map":{"version":3,"names":[],"sources":["C:/Users/mahes/OneDrive/Desktop/Mahesh Pathak/Practice-Folder/Acc/acc/src/componets/Slider.js"],"sourcesContent":["// import React, { useContext, useState } from 'react';\r\n// import Calender from './Appointment/Calender';\r\n// import TimeSlots from './Appointment/TimeSlots';\r\n// import closeIcon from '../assets/close.png';\r\n// import { AppointmentContext } from './Appointment/Context/AppointmentContext';\r\n// import axios from 'axios';\r\n\r\n// const Slider = ({ closeSlider }) => {\r\n//   const [selectDate, setSelectDate] = useState(null);\r\n//   const [bookedSlots, setBookedSlots] = useState({});\r\n//   const [sessionBook, setSessionBook] = useState(null);\r\n//   const [activeTab, setActiveTab] = useState('session');\r\n//   const [yourSession, setYourSession] = useState([])\r\n//   const dateKey = selectDate ? selectDate.format('YYYY-MM-DD') : null;\r\n//   const slotsBookedForDate = bookedSlots[dateKey]\r\n//   const [isCalendarOpen, setIsCalendarOpen] = useState(false);\r\n\r\n//   const {\r\n//     selectedSessionName, date, setDate, time, setTime, setLast_session, id\r\n//   } = useContext(AppointmentContext);\r\n\r\n//   // Handles the selected date change in the calendar\r\n//   const handleChange = (date) => {\r\n//     setSelectDate(date);\r\n//     setDate(date.format('YYYY-MM-DD'));\r\n//     setLast_session(date.format('YYYY-MM-DD'));\r\n//   };\r\n\r\n//   // Handles booking a time slot and updates booked slots state\r\n//   const handleBookSlot = (timeSlot) => {\r\n//     if (selectDate) {\r\n//       const dateKey = selectDate.format('YYYY-MM-DD');\r\n//       const currentBookings = bookedSlots[dateKey] || [];\r\n//       if (currentBookings.length < 2) { // Limit to two slots per date\r\n//         setTime(timeSlot)\r\n//         setBookedSlots((prev) => ({\r\n//           ...prev,\r\n//           [dateKey]: [timeSlot],\r\n//         }));\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   // Handles booking confirmation for a session and posts data to the backend\r\n//   const handleBook = async () => {\r\n//     setSessionBook({ date: selectDate.format('DD/MM/YYYY'), slots: slotsBookedForDate });\r\n\r\n//   };\r\n\r\n//   // Handler to open the calendar for selecting date and time slots\r\n//   const handleBookSessionClick = () => {\r\n//     setActiveTab('book');\r\n//     setIsCalendarOpen(true);\r\n//   };\r\n//   const handleYourSessionClick = async (id) => {\r\n//     console.log(\"Mahesh\")\r\n//     setActiveTab(\"session\")\r\n//     setIsCalendarOpen(false)\r\n//     try {\r\n//       const response = await axios.get(`http://localhost:8000/api/appointment/getSessionDetails/${id}`, {\r\n//         withCredentials: true\r\n//       });\r\n//       console.log(response.data);\r\n//       setYourSession(response.data); // Store the fetched data\r\n//     } catch (error) {\r\n//       console.log(error);\r\n//     }\r\n//   }\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//   return (\r\n//     <div className=\"fixed top-0 right-0 h-full w-1/2 bg-gray-100 shadow-lg transform translate-x-0 transition-transform overflow-y-auto\">\r\n//       {/* Header with Close Button */}\r\n//       <div>\r\n//         <div className=\"px-3 pt-3 rounded-lg flex justify-start text-slate-400\">\r\n//           <button className=\"font-bold\" onClick={closeSlider}>\r\n//             <img src={closeIcon} className='w-5' alt=\"Close\" />\r\n//           </button>\r\n//           <p className=\"px-2 font-semibold text-sm\">Mock Session</p>\r\n//         </div>\r\n//         <p className=\"border-b pb-3 text-slate-700 m-2 px-8 text-xl\">{selectedSessionName}</p>\r\n//       </div>\r\n\r\n\r\n//       {/* Section to book or view session */}\r\n//       <div className=\"uppercase flex justify-around py-2 border-b-2 text-sm font-medium\">\r\n//         <p onClick={handleBookSessionClick}\r\n//           className={`cursor-pointer ${activeTab === 'book' ? 'text-blue-500 border-b-2' : ''}`}>\r\n//           Book Session\r\n//         </p>\r\n//         <p onClick={() => handleYourSessionClick(id)}\r\n//           className={`cursor-pointer ${activeTab === 'session' ? 'text-blue-500 border-b-2' : ''}`}>\r\n//           Your Session\r\n//         </p>\r\n\r\n//         {/* <Your_Session activeTab={activeTab} setIsCalendarOpen={setIsCalendarOpen} setActiveTab={setActiveTab} /> */}\r\n//       </div>\r\n\r\n\r\n//       {/* Calendar and time slot selection */}\r\n//       <div className=\"px-6 mt-3\">\r\n//         {!isCalendarOpen ? (\r\n//           <p className='flex justify-center items-center text-center h-screen text-slate-400'>\r\n\r\n//             <div className='w-full m-0'>\r\n//               {/* Updated to avoid invalid nesting */}\r\n//               <div className='bg-slate-200 rounded-lg border w-full flex justify-center items-center text-center p-4'>\r\n//                 <span className='text-xl px-2'>Session:</span> {/* Changed <p> to <span> */}\r\n//                 <select className='px-4 py-2 rounded-md w-1/2'>\r\n//                   <option value=\"\">Select Session</option>\r\n//                 </select>\r\n//               </div>\r\n\r\n//               {/* Display sessions fetched from the API */}\r\n//               <div>\r\n//                 {yourSession && yourSession.length > 0 ? (\r\n//                   <ul>\r\n//                     {yourSession.map((item) => (\r\n//                       <li key={item._id}>\r\n//                         <p>{item.date}</p>\r\n//                       </li>\r\n//                     ))}\r\n//                   </ul>\r\n//                 ) : (\r\n//                   <p>No sessions available</p>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//           </p>\r\n//         ) : (\r\n//           <div className=\"flex justify-between\">\r\n//             <Calender selectDate={selectDate} handleChange={handleChange} />\r\n//             {selectDate && (\r\n//               <div>\r\n//                 <div className='mb-3 bg-slate-200 rounded-lg w-1/2 mx-auto flex items-center justify-center text-center py-2'>\r\n//                   <h3>Select time-slot</h3>\r\n//                 </div>\r\n//                 <TimeSlots\r\n//                   slotsBookedForDate={slotsBookedForDate}\r\n//                   onBookSlot={handleBookSlot}\r\n//                   handleBook={handleBook}\r\n//                 />\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       {activeTab === 'book' ? (\r\n//         <div className=\"flex justify-around mb-4\">\r\n//           <div>\r\n//             {sessionBook ? (\r\n//               <div>\r\n//                 <h2 className='text-[12px] text-slate-500 font-medium'>Session Booked for</h2>\r\n//                 <h2>{date}, {time}</h2>\r\n//               </div>\r\n//             ) : (\r\n//               <h2>Available Slots for Booking</h2>\r\n//             )}\r\n//           </div>\r\n\r\n//           {/* Book session button */}\r\n//           <div className='flex justify-between'>\r\n//             <div>\r\n//               <button\r\n//                 className='text-white p-2 border bg-blue-400 rounded-xl'\r\n//                 onClick={handleBook}\r\n//               >\r\n//                 Book Session\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       ) : (\r\n//         <p className=' text-center'>PLEASE BOOK SESSION</p>\r\n//       )}\r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Slider;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}